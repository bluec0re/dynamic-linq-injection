using System;
using System.Net;
using System.Linq;
using System.Linq.Dynamic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Reflection;


namespace DynamicLinq.Test
{
	class Message
	{
		public string Sender;
		public string Receiver;
		public string Text;
		public DateTime SentAt;
		public int Id;
		public IPAddress ip4;
		public Assembly ass;
		public Type type;

		public Message(string sender, string receiver, string text, DateTime sentAt, int id, IPAddress ip4)
		{
			this.Sender = sender;
			this.Receiver = receiver;
			this.Text = text;
			this.SentAt = sentAt;
			this.Id = id;
			this.ip4 = ip4;
		}
	}

	[TestClass]
	public class ExploitTest
	{
		[TestMethod]
		public void access_to_members_restricted_member_access()
		{
			var messages = new Message[] {
				new Message("Alice", "Bob", "Hello Bob!", DateTime.Now, 1, IPAddress.Parse("127.0.0.1"))
			};
			messages[0].type = typeof(Message);
			messages[0].ass = typeof(Message).Assembly;

			var filteredMessages = messages.Where("Id = 2");
			Assert.AreEqual(0, filteredMessages.Count());

			filteredMessages = messages.Where("Id = 1");
			Assert.AreEqual(1, filteredMessages.Count());

			try
			{
				filteredMessages = messages.Where("Text = ass.GetName().ToString()");
				Assert.Fail("Methods allowed with v{0} on type Assembly", typeof(DynamicExpression).Assembly.GetName().Version);
			}
			catch (ParseException e)
			{
				if (!e.Message.Contains("Methods on type"))
					throw e;
			}

			try
			{
				filteredMessages = messages.Where("Text = ip4.GetAddressBytes().ToString()");
				Assert.Fail("Methods allowed with v{0} on type IPAddress", typeof(DynamicExpression).Assembly.GetName().Version);
			}
			catch (ParseException e)
			{
				if (!e.Message.Contains("Methods on type"))
					throw e;
			}
		}
	}
}